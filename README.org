#+TITLE: Toy STUN Server
#+AUTHOR: wtnqk
#+DATE: 2025-07-23

* STUNサーバー仕様

** 概要
STUN (Session Traversal Utilities for NAT) は、NAT (Network Address Translation) を通過するためのプロトコルで、クライアントが自身のパブリックIPアドレスとポート番号を検出できるようにします。
RFC 5389で定義されており、WebRTCやVoIPなどのリアルタイム通信で広く使用されています。

** 主要機能
*** 1. バインディング (Binding)
- クライアントは自身のパブリックアドレスを検出
- サーバーはクライアントの送信元アドレスを返送
- NAT種別の検出サポート

*** 2. 認証機能 (オプション)
- MESSAGE-INTEGRITY属性による認証
- USERNAME/REALM/NONCEによる認証メカニズム
- 共有秘密鍵ベースの認証

*** 3. フィンガープリント
- FINGERPRINT属性によるメッセージ完全性チェック
- CRC-32を使用した検証

** プロトコル仕様

*** パケット構造の概要

#+begin_src ditaa :file stun-packet-structure.png
    +--------------------------------------------------+
    |                  STUN Header                     |
    |                  (20 bytes)                      |
    +--------------------------------------------------+
    |                                                  |
    |              STUN Attributes                     |
    |                (Variable)                        |
    |                                                  |
    |  +--------------------------------------------+  |
    |  |  Attribute 1: XOR-MAPPED-ADDRESS           |  |
    |  +--------------------------------------------+  |
    |  |  Attribute 2: SOFTWARE                     |  |
    |  +--------------------------------------------+  |
    |  |  Attribute 3: FINGERPRINT                  |  |
    |  +--------------------------------------------+  |
    |                                                  |
    +--------------------------------------------------+
#+end_src

*** メッセージフォーマット

**** STUNヘッダー (20バイト)
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0|     STUN Message Type     |         Message Length        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Magic Cookie                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                     Transaction ID (96 bits)                  |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

- *Message Type* (14ビット): メッセージのタイプとクラスを示す
- *Message Length* (16ビット): ヘッダーを除いたメッセージボディの長さ（バイト単位）
- *Magic Cookie* (32ビット): 固定値 =0x2112A442=
- *Transaction ID* (96ビット): リクエストとレスポンスを関連付けるためのID

*** メッセージタイプ
**** リクエスト
- *Binding Request* (=0x0001=): クライアントがサーバーに送信し、自身のパブリックアドレスを要求

**** レスポンス
- *Binding Success Response* (=0x0101=): 成功時のレスポンス
- *Binding Error Response* (=0x0111=): エラー時のレスポンス

*** 属性フォーマット
属性は TLV (Type-Length-Value) 形式:
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Type                  |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Value (variable)                  ... |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

*** 主要な属性タイプ
**** MAPPED-ADDRESS (0x0001)
クライアントのアドレスとポートを含む（後方互換性のため）

**** XOR-MAPPED-ADDRESS (0x0020)
クライアントのアドレスとポートをXOR演算でエンコードしたもの（推奨）

フォーマット:
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|x x x x x x x x|    Family     |         X-Port                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                X-Address (Variable)                       ... |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

- *Family*: =0x01= (IPv4) または =0x02= (IPv6)
- *X-Port*: ポート番号 XOR Magic Cookie の上位16ビット
- *X-Address*: IPアドレス XOR Magic Cookie（IPv4）またはMagic Cookie + Transaction ID（IPv6）

**** ERROR-CODE (0x0009)
エラーレスポンスで使用

**** SOFTWARE (0x8022)
サーバー/クライアントソフトウェアの説明（オプション）

**** FINGERPRINT (0x8028)
メッセージの完全性チェック用CRC-32（オプション）

*** 基本的な処理フロー

#+begin_src ditaa :file stun-basic-flow.png
    Client                    NAT                    STUN Server
       |                       |                           |
       |   Binding Request     |                           |
       |   Transaction ID: X   |                           |
       |---------------------->|                           |
       |  src: 192.168.1.5:5000|                           |
       |                       |     Binding Request       |
       |                       |     Transaction ID: X     |
       |                       |-------------------------->|
       |                       |   src: 203.0.113.1:12345  |
       |                       |                           |
       |                       |                           | Process request
       |                       |                           | Extract source
       |                       |                           | Create XOR-MAPPED
       |                       |                           |
       |                       |    Binding Response       |
       |                       |    Transaction ID: X      |
       |                       |    XOR-MAPPED-ADDRESS:    |
       |                       |    203.0.113.1:12345      |
       |                       |<--------------------------|
       |   Binding Response    |                           |
       |   Transaction ID: X   |                           |
       |   XOR-MAPPED-ADDRESS: |                           |
       |   203.0.113.1:12345   |                           |
       |<----------------------|                           |
       |                       |                           |
#+end_src

1. *クライアント → サーバー*: Binding Request送信
   - Transaction IDを生成
   - Magic Cookieを設定
   - UDPパケットとして送信

2. *サーバー処理*:
   - リクエストを受信
   - 送信元IPアドレスとポートを取得
   - XOR-MAPPED-ADDRESS属性を作成

3. *サーバー → クライアント*: Binding Success Response送信
   - 同じTransaction IDを使用
   - XOR-MAPPED-ADDRESS属性を含める

*** エラーコード
- *400 Bad Request*: 不正なリクエスト
- *420 Unknown Attribute*: 未知の必須属性
- *500 Server Error*: サーバー内部エラー

* NAT種別検出の仕組み

STUNを使用したNAT種別検出は、複数のSTUNサーバーとポートを使用して、NATデバイスの動作を分析します。

** 検出可能なNAT種別

*** Full Cone NAT (完全コーンNAT)
- 内部IPとポートが外部IPとポートに1対1でマッピング
- 任意の外部ホストから通信可能

*** Restricted Cone NAT (制限コーンNAT)
- 内部から通信したことのある外部IPアドレスからのみ通信可能
- ポート番号は任意

*** Port Restricted Cone NAT (ポート制限コーンNAT)
- 内部から通信したことのある外部IPアドレスとポートの組み合わせからのみ通信可能

*** Symmetric NAT (対称NAT)
- 宛先ごとに異なる外部ポートを割り当て
- 最も制限的なNAT種別

** 検出アルゴリズム

#+begin_src ditaa :file nat-detection-flow.png
                                     Start
                                       |
                                       v
                            +---------------------+
                            | Test I              |
                            | Basic Binding Test  |
                            | STUN Server A:3478  |
                            +---------------------+
                                       |
                                  Got response?
                                   /        \
                                 No          Yes
                                 |            |
                                 v            v
                         UDP Blocked    Check if same
                                       mapped address
                                             |
                                             v
                            +------------------------+
                            | Test II                |
                            | Same IP, Different Port|
                            | STUN Server A:3479     |
                            +------------------------+
                                       |
                                  Got response?
                                   /        \
                                 No          Yes
                                 |            |
                                 v            v
                                 |      Open Internet or
                                 |      Full Cone NAT
                                 |
                                 v
                            +------------------------+
                            | Test III               |
                            | Different IP Test      |
                            | STUN Server B:3478     |
                            +------------------------+
                                       |
                                  Got response?
                                   /        \
                                 No          Yes
                                 |            |
                                 v            v
                          Restricted    Full Cone NAT
                          or Symmetric
                                 |
                                 v
                            +------------------------+
                            | Test IV                |
                            | Port Mapping Test      |
                            | Compare mapped ports   |
                            +------------------------+
                                       |
                              Same port mapping?
                                   /        \
                                 No          Yes
                                 |            |
                                 v            v
                         Symmetric NAT   Port Restricted
                                        Cone NAT
#+end_src

1. *Test I*: 基本的なバインディングテスト
   - プライマリSTUNサーバーにBinding Requestを送信
   - パブリックIPアドレスを取得

2. *Test II*: 同一IPアドレス、異なるポートからのテスト
   - プライマリサーバーの別ポートから応答を送信
   - 応答が受信できればFull Cone NAT

3. *Test III*: 異なるIPアドレスからのテスト
   - セカンダリSTUNサーバーから応答を送信
   - 応答が受信できればFull Cone NAT、できなければRestricted

4. *マッピング動作テスト*
   - 異なる宛先に対してBinding Requestを送信
   - 割り当てられるポートが同じならCone NAT、異なればSymmetric NAT

* STUN認証メカニズム

** Long-Term Credential Mechanism
長期認証メカニズムは、共有秘密鍵を使用してメッセージの完全性を保証します。

*** 認証フロー

#+begin_src ditaa :file stun-auth-flow.png
    Client                                      STUN Server
       |                                              |
       |          Binding Request                     |
       |          (No Authentication)                 |
       |--------------------------------------------->|
       |                                              |
       |                                              | Check auth
       |                                              | Not present
       |                                              |
       |        401 Unauthorized Error                |
       |        REALM="example.com"                   |
       |        NONCE="f//499k954d6OL34oL9FSTvy64sA"  |
       |<---------------------------------------------|
       |                                              |
       | Calculate key:                               |
       | key = MD5(username:realm:password)           |
       |                                              |
       |          Binding Request                     |
       |          USERNAME="alice"                    |
       |          REALM="example.com"                 |
       |          NONCE="f//499k954d6OL34oL9FSTvy64sA"|
       |          MESSAGE-INTEGRITY=<HMAC-SHA1>       |
       |--------------------------------------------->|
       |                                              |
       |                                              | Verify:
       |                                              | - NONCE valid
       |                                              | - Calculate HMAC
       |                                              | - Compare
       |                                              |
       |          Binding Success Response            |
       |          XOR-MAPPED-ADDRESS                  |
       |          MESSAGE-INTEGRITY=<HMAC-SHA1>       |
       |<---------------------------------------------|
       |                                              |
#+end_src

1. クライアントが認証なしでリクエストを送信
2. サーバーが401 UnauthorizedエラーとNONCE、REALMを返送
3. クライアントが認証情報を含めて再送信
4. サーバーが認証を検証して応答

*** MESSAGE-INTEGRITY属性
- HMAC-SHA1を使用
- 計算対象: STUNヘッダー + 全属性（MESSAGE-INTEGRITY属性の値を除く）
- キー: MD5(username:realm:password)

** Short-Term Credential Mechanism
短期認証メカニズムは、一時的な認証情報を使用します。

*** 特徴
- NONCEは使用しない
- REALMは固定値
- パスワードは時限的に有効

* STUNメッセージの再送制御

** 再送タイミング

#+begin_src ditaa :file stun-retransmission.png
    Client                                      STUN Server
       |                                              |
       |          Binding Request (RTO=500ms)         |
       |--------------------------------------------->| X (Lost)
       |                                              |
       |<----------------- 500ms -------------------->|
       |                                              |
       |          Binding Request (RTO=1000ms)        |
       |--------------------------------------------->| X (Lost)
       |                                              |
       |<----------------- 1000ms ------------------->|
       |                                              |
       |          Binding Request (RTO=2000ms)        |
       |--------------------------------------------->|
       |                                              | Process
       |          Binding Success Response            |
       |<---------------------------------------------|
       |                                              |
       
    Timeline:
    0ms     ----[Request 1]----X
    500ms   ----[Request 2]----X  
    1500ms  ----[Request 3]-----> Success!
#+end_src

RFC 5389では以下の再送間隔を推奨:
- 初回送信後: 500ms
- 2回目: 1000ms
- 3回目: 2000ms
- 4回目: 4000ms
- 5回目: 8000ms
- 6回目: 16000ms
- 7回目以降: なし（タイムアウト）

** 信頼性の確保
- Transaction IDによる重複排除
- 指数バックオフによる再送
- 最大再送回数の制限

* セキュリティ考慮事項

- STUNサーバーは認証なしで動作するため、DDoS攻撃の対象になりやすい
- レート制限の実装を推奨
- 必要に応じてMESSAGE-INTEGRITYやFINGERPRINT属性を使用
- 送信元IPアドレスの検証
- リフレクション攻撃の防止

* 参考資料

- [[https://datatracker.ietf.org/doc/html/rfc5389][RFC 5389 - Session Traversal Utilities for NAT (STUN)]]
- [[https://datatracker.ietf.org/doc/html/rfc8489][RFC 8489 - Session Traversal Utilities for NAT (STUN)]] (最新版)
- [[https://datatracker.ietf.org/doc/html/rfc3489][RFC 3489 - STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs)]] (旧版、参考)

* Toy STUN Server

このプロジェクトは、STUN (Session Traversal Utilities for NAT) サーバーの実装です。

** STUNプロトコル仕様

*** 概要
STUN (RFC 5389) は、NAT (Network Address Translation) を通過するためのプロトコルで、クライアントが自身のパブリックIPアドレスとポート番号を検出できるようにします。

*** メッセージフォーマット

**** STUNヘッダー (20バイト)
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0|     STUN Message Type     |         Message Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Magic Cookie                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                                 |
|                     Transaction ID (96 bits)                    |
|                                                                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

- *Message Type* (14ビット): メッセージのタイプとクラスを示す
- *Message Length* (16ビット): ヘッダーを除いたメッセージボディの長さ（バイト単位）
- *Magic Cookie* (32ビット): 固定値 =0x2112A442=
- *Transaction ID* (96ビット): リクエストとレスポンスを関連付けるためのID

*** メッセージタイプ

**** リクエスト
- *Binding Request* (=0x0001=): クライアントがサーバーに送信し、自身のパブリックアドレスを要求

**** レスポンス
- *Binding Success Response* (=0x0101=): 成功時のレスポンス
- *Binding Error Response* (=0x0111=): エラー時のレスポンス

*** 属性フォーマット

属性は TLV (Type-Length-Value) 形式:
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Type                  |            Length               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Value (variable)                      ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

*** 主要な属性タイプ

**** MAPPED-ADDRESS (0x0001)
クライアントのアドレスとポートを含む（後方互換性のため）

**** XOR-MAPPED-ADDRESS (0x0020)
クライアントのアドレスとポートをXOR演算でエンコードしたもの（推奨）

フォーマット:
#+begin_example
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|x x x x x x x x|    Family     |         X-Port                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                X-Address (Variable)                           ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example

- *Family*: =0x01= (IPv4) または =0x02= (IPv6)
- *X-Port*: ポート番号 XOR Magic Cookie の上位16ビット
- *X-Address*: IPアドレス XOR Magic Cookie（IPv4）またはMagic Cookie + Transaction ID（IPv6）

**** ERROR-CODE (0x0009)
エラーレスポンスで使用

**** SOFTWARE (0x8022)
サーバー/クライアントソフトウェアの説明（オプション）

**** FINGERPRINT (0x8028)
メッセージの完全性チェック用CRC-32（オプション）

*** 基本的な処理フロー

1. *クライアント → サーバー*: Binding Request送信
   - Transaction IDを生成
   - Magic Cookieを設定
   - UDPパケットとして送信

2. *サーバー処理*:
   - リクエストを受信
   - 送信元IPアドレスとポートを取得
   - XOR-MAPPED-ADDRESS属性を作成

3. *サーバー → クライアント*: Binding Success Response送信
   - 同じTransaction IDを使用
   - XOR-MAPPED-ADDRESS属性を含める

*** エラーコード

- *400 Bad Request*: 不正なリクエスト
- *420 Unknown Attribute*: 未知の必須属性
- *500 Server Error*: サーバー内部エラー

*** セキュリティ考慮事項

- STUNサーバーは認証なしで動作するため、DDoS攻撃の対象になりやすい
- レート制限の実装を推奨
- 必要に応じてMESSAGE-INTEGRITYやFINGERPRINT属性を使用

*** 参考文献

- [[https://datatracker.ietf.org/doc/html/rfc5389][RFC 5389 - Session Traversal Utilities for NAT (STUN)]]
- [[https://datatracker.ietf.org/doc/html/rfc8489][RFC 8489 - Session Traversal Utilities for NAT (STUN)]] (最新版)